# External Secrets Operator Configuration

# Configure the service account
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: ${role_arn}

# Global settings
global:
  # Defaults to .Release.Name
  # If .Release.Name is "external-secrets", default is "external-secrets.io"
  # If .Release.Name is not "external-secrets", default is "external-secrets.io/{{ .Release.Name }}"
  webhook:
    # Use certmanager to handle webhook certificates
    certManager:
      enabled: true
      cert:
        # Secret contains the webhook TLS certificate
        # +optional
        secretName: "external-secrets-webhook-cert"
      # If certificate is issued by cert-manager
      issuerRef:
        name: "letsencrypt-staging"
        kind: "ClusterIssuer"

# Configure which ClusterSecretStore and SecretStore to create
# SecretStore is namespaced while ClusterSecretStore is cluster-wide
clusterSecretStore:
  aws:
    # Create a AWS SecretManager ClusterSecretStore
    secretsManager:
      enabled: true
      # Service account with access to AWS Secrets Manager
      serviceAccountRef:
        name: "external-secrets"
      # Region where secrets are stored
      region: "${aws_region}"

    # Create a AWS Parameter Store ClusterSecretStore
    parameterStore:
      enabled: true
      # Service account with access to AWS Parameter Store
      serviceAccountRef:
        name: "external-secrets"
      # Region where parameters are stored
      region: "${aws_region}"

# Resource requests and limits
resources:
  limits:
    cpu: 100m
    memory: 256Mi
  requests:
    cpu: 50m
    memory: 128Mi

# Add pod security context
podSecurityContext:
  fsGroup: 65534

# Add container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  capabilities:
    drop:
      - ALL